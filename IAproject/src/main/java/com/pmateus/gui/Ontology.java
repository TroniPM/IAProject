/*
 * Copyright 2016 Paulo Mateus [UFRPE-UAG] <paulomatew@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.pmateus.gui;

import com.pmateus.gui.util.popupmenu.PopUpMenuAtRightClickNormalEditorListener;
import com.pmateus.gui.util.xmlpack.XmlTextPane;
import com.pmateus.util.Session;
import com.pmateus.util.UtilMethods;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class Ontology extends javax.swing.JPanel {

    private JFramePrincipal jFrameMain;
    public SwingFXWebView aWebViewer = null;

    public boolean houveAlteracao = false;
    private String pathToIndex = "\\data\\viewer\\data\\";//Com \\ no inicio e \\ no fim
    private String deleteBatFile = "delete.bat";//File name
    private String converterBatFile = "conversor.bat";//file name
    private String outputFileNameToConversor = "foaf.owl";//file name

    /**
     * Creates new form Compiler
     */
    public String getSelectedText() {
        if (jTextPane1.getSelectedText() != null) { // See if they selected something 
            return jTextPane1.getSelectedText();
            // Do work with String s
        }
        return "";
    }

    public void destroy() {
        jFrameMain = null;
        aWebViewer = null;
    }

    public Ontology(JFramePrincipal frameMain) {
        this.jFrameMain = frameMain;
        initComponents();

        jTextPane1.addMouseListener(new PopUpMenuAtRightClickNormalEditorListener(jTextPane1));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new XmlTextPane();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/pmateus/gui/Bundle"); // NOI18N
        jButton1.setText(bundle.getString("Ontology.jButton1.text")); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText(bundle.getString("Ontology.jButton2.text")); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextPane1.setEditable(false);
        jTextPane1.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        jScrollPane2.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 425, Short.MAX_VALUE)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 479, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        initGraphViewer();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //copy all
        String myString = jTextPane1.getText();
        UtilMethods.copyToClipboard(myString);
    }//GEN-LAST:event_jButton2ActionPerformed

    public void refreshOntologyTextViewer() {
        if (Session.isDebbug) {
            System.out.println(Compiler.class + " refreshOntologyTextViewer()");
        }
        try {
            jFrameMain.coreApp.owlRepository.saveOntologyToOutputStream();
            String aString = new String(jFrameMain.coreApp.owlRepository.currentOutputStreamOntology.toString()).trim().replaceAll("\n+", "\n");
            jTextPane1.setText(aString);
        } catch (Exception e) {
        }

        jTextPane1.setCaretPosition(0);//getViewport().setViewPosition(new Point(0, 0));
    }

    public void atualizar() {
        refreshOntologyTextViewer();
    }

    public void initGraphViewer() {
        Process aProcess = null;
        //Deleting current files...
        try {
            aProcess = Runtime.getRuntime().exec("cmd /c start /wait " + System.getProperty("user.dir") + pathToIndex + deleteBatFile);
            aProcess.waitFor();
        } catch (IOException ex) {
            if (Session.isDebbug) {
                Logger.getLogger(Compiler.class.getName()).log(Level.SEVERE, null, ex);
            }

            JOptionPane.showMessageDialog(null, "We couldn't execute some scripts. Try to run this programm as Administrator:\n" + ex.getLocalizedMessage(), "Problem to execute script", JOptionPane.ERROR_MESSAGE);
        } catch (InterruptedException ex) {
            if (Session.isDebbug) {
                Logger.getLogger(Compiler.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(null, "We couldn't execute some scripts. Try to run this programm as Administrator:\n" + ex.getLocalizedMessage(), "Problem to execute script", JOptionPane.ERROR_MESSAGE);
        }

        //Creating new files e converting...
        try {
            jFrameMain.coreApp.owlRepository.saveOntologyToView(System.getProperty("user.dir") + pathToIndex + outputFileNameToConversor);

            aProcess = Runtime.getRuntime().exec("cmd /c start /wait " + System.getProperty("user.dir") + pathToIndex + converterBatFile);
            aProcess.waitFor();

        } catch (IOException ex) {
            if (Session.isDebbug) {
                Logger.getLogger(Compiler.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(null, "We couldn't execute some scripts. Try to run this programm as Administrator:\n" + ex.getLocalizedMessage(), "Problem to execute script", JOptionPane.ERROR_MESSAGE);
        } catch (InterruptedException ex) {
            if (Session.isDebbug) {
                Logger.getLogger(Compiler.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(null, "We couldn't execute some scripts. Try to run this programm as Administrator:\n" + ex.getLocalizedMessage(), "Problem to execute script", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            if (Session.isDebbug) {
                Logger.getLogger(Compiler.class.getName()).log(Level.SEVERE, null, ex);
            }
            JOptionPane.showMessageDialog(null, "We couldn't execute some scripts. Try to run this programm as Administrator:\n" + ex.getLocalizedMessage(), "Problem to execute script", JOptionPane.ERROR_MESSAGE);
        }

        if (aWebViewer != null) {
            aWebViewer.myJFrame.dispatchEvent(new WindowEvent(aWebViewer.myJFrame, WindowEvent.WINDOW_CLOSING));
        }

        aWebViewer = new SwingFXWebView(this);

        aWebViewer.requestFocus();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JEditorPane jTextPane1;
    // End of variables declaration//GEN-END:variables

}
